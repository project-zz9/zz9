{"version":3,"file":"static/js/780.b3d6176b.chunk.js","mappings":"sJAMWA,E,mGAAU,SAAVA,GAAAA,EAAU,YAAVA,EAAU,2BAAVA,IAAAA,EAAU,KAuDrB,MA7CA,SAAwB,GAA4C,IAA1CC,EAAO,EAAPA,QAASC,EAAU,EAAVA,WACjC,GAAwBC,EAAAA,EAAAA,UAASH,EAAWI,MAAK,eAA1CC,EAAI,KAAEC,EAAO,KACdC,GAAaC,EAAAA,EAAAA,cAAY,WAC7BF,GAAQ,SAACG,GAAI,OACXA,IAAST,EAAWI,KAAOJ,EAAWU,YAAcV,EAAWI,IAAI,GAEvE,GAAG,IACGO,GAAkBH,EAAAA,EAAAA,cACtB,kBACE,SAAC,KAAQ,kBACFN,EAAa,CAAEA,WAAAA,GAAe,CAAC,GAAC,IACrCU,QAAQ,QACRC,YAAa,CAAEC,WAAYT,GAC3BU,UAAW,IACXC,SAAU,SAACC,GACHA,GACJhB,EAAQgB,EAAOC,UAEnB,EACAC,WAAY,CACVC,gBAAiB,WAEnB,GAEJ,CAAClB,EAAYG,EAAMJ,IAGrB,OACE,UAACoB,EAAS,YACR,SAACC,EAAW,WACV,SAACC,EAAA,EAAU,CAACC,QAASjB,EAAW,SAC7BF,IAASL,EAAWI,MACnB,SAAC,IAAU,CAACqB,MAAM,WAElB,SAAC,IAAW,CAACA,MAAM,eAIzB,SAACC,EAAW,WACV,SAACf,EAAe,QAIxB,EAIMU,EAAYM,EAAAA,GAAAA,IAAU,wEAKtBD,EAAcC,EAAAA,GAAAA,IAAU,wCAIxBL,EAAcK,EAAAA,GAAAA,IAAU,+HCtE9B,G","sources":["components/atoms/QrScannerInput/QrScannerInput.tsx","components/atoms/QrScannerInput/index.ts"],"sourcesContent":["import { IconButton } from \"@mui/material\";\nimport { FC, useCallback, useState } from \"react\";\nimport { ToggleLeft, ToggleRight } from \"react-feather\";\nimport { QrReader } from \"react-qr-reader\";\nimport styled from \"styled-components\";\n\nconst enum CameraMode {\n  USER = \"user\",\n  ENVIRONMENT = \"environment\",\n}\n\ninterface IQrScannerInputs {\n  setData: SetState<string>;\n  ViewFinder?: FC<any>;\n}\n\nfunction QrScannerInput({ setData, ViewFinder }: IQrScannerInputs) {\n  const [mode, setMode] = useState(CameraMode.USER);\n  const toggleMode = useCallback(() => {\n    setMode((prev) =>\n      prev === CameraMode.USER ? CameraMode.ENVIRONMENT : CameraMode.USER\n    );\n  }, []);\n  const QrReaderWrapper = useCallback(\n    () => (\n      <QrReader\n        {...(ViewFinder ? { ViewFinder } : {})}\n        videoId=\"video\"\n        constraints={{ facingMode: mode }}\n        scanDelay={500}\n        onResult={(result) => {\n          if (!!result) {\n            setData(result.getText());\n          }\n        }}\n        videoStyle={{\n          backgroundColor: \"black\",\n        }}\n      />\n    ),\n    [ViewFinder, mode, setData]\n  );\n\n  return (\n    <RootFrame>\n      <ButtonFrame>\n        <IconButton onClick={toggleMode}>\n          {mode === CameraMode.USER ? (\n            <ToggleLeft color=\"white\" />\n          ) : (\n            <ToggleRight color=\"white\" />\n          )}\n        </IconButton>\n      </ButtonFrame>\n      <ReaderFrame>\n        <QrReaderWrapper />\n      </ReaderFrame>\n    </RootFrame>\n  );\n}\n\nexport default QrScannerInput;\n\nconst RootFrame = styled.div`\n  position: relative;\n  pointer-events: none;\n`;\n\nconst ReaderFrame = styled.div`\n  z-index: -1;\n`;\n\nconst ButtonFrame = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n  margin: 2.5%;\n  z-index: 1;\n  pointer-events: all;\n`;\n","import QrScannerInput from \"./QrScannerInput\";\n\nexport default QrScannerInput;\n"],"names":["CameraMode","setData","ViewFinder","useState","USER","mode","setMode","toggleMode","useCallback","prev","ENVIRONMENT","QrReaderWrapper","videoId","constraints","facingMode","scanDelay","onResult","result","getText","videoStyle","backgroundColor","RootFrame","ButtonFrame","IconButton","onClick","color","ReaderFrame","styled"],"sourceRoot":""}